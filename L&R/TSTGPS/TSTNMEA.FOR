        PROGRAM TSTNMEA
C READS NAVIGATION DATA FROM DP RAM
C MAKE SURE TO WAIT ONE UPDATE PERIOD (USUALLY 1 SEC) 
C BEFORE READING AGAIN
        REAL*8 LAT,LONG
        REAL*4 HOG,SOG,ALT
        INTEGER*2 IERR,ITEMP
10      CONTINUE
        lat = 0.
        long = 0.
        hog = 0.
        sog = 0.
        CALL GETNMEA(LAT,LONG,HOG,SOG,ALT,IERR)
        PRINT*, 'IERR =  ',IERR
        PRINT *,'LAT  =  ',LAT
        PRINT *,'LONG =  ',LONG
        PRINT *,'HOG  =  ',HOG
        PRINT *,'SOG  =  ',SOG
        PRINT *,'ALT  =  ',ALT
        PRINT *
        PRINT *, 'MORE 1 = YES'
        READ (*,*) ITEMP
        IF (ITEMP .EQ. 1) GOTO 10
        END
C ********************** GETNMEA *************************
C RETREIVES NAVIGATION DATA FROM DP RAM
C SOG = SPEED OVER GROUND. HOG = HEADING OVER GROUND
C REAL*8 LAT LONG  DECIMAL DEG POSITIVE N AND E
C REAL*4 HOG (0 TO 360 DEG) SOG (KNOTS)
C INTEGER*2 IERR
C IERR  BIT 0 = 1  ACQUIRING SATELLITES
C IERR  BIT 1 = 1  NO $GPGGA
C IERR  BIT 2 = 1  NO $GPRMC
C IERR  BITS 1&2 = 1  TIMED OUT WAITING FOR DATA
C
        SUBROUTINE GETNMEA (LAT,LONG,HOG,SOG,ALT,IERR)
        implicit none
        REAL*8 LAT,LONG
        REAL*4 HOG,SOG,ALT
        INTEGER*2 IERR
        INTEGER*2 ITEMP,ICNT,STATUS
C
C       READ UPDATE FLAG TO ASSURE THAT DATA IS AVAILABLE
C        IERR = 0
        ICNT = -32000
        ITEMP = 0
        STATUS = 0
        DO WHILE (ITEMP .EQ. 0)
          IERR = 0
          CALL GETDPRAM(INT2(#B3),ITEMP)    !FLAG FOR GGA
          CALL GETDPRAM(INT2(#B2),STATUS)   !FLAG FOR RMC
          IF (ITEMP .EQ. 0)  IERR = IBSET(IERR,1)
          IF (STATUS .EQ. 0) IERR = IBSET(IERR,2)
          ITEMP = ITEMP + STATUS  !PROCEED IF EITHER GOOD
          ICNT = ICNT+1
          IF (ICNT .EQ. 32000) RETURN
C            IERR =1
C            RETURN
C          ENDIF
        ENDDO
        print*, 'update flg =  ',itemp
C GET GPS STATUS WHICH SHOWS E/W, N/S, 
        CALL GETDPRAM(INT2(#A4),STATUS)
        print *, 'gps status =  ',status
c        status = ibset(status,7)
c        print *, 'gps status =  ',status
C CALCULATE LATITUDE
        CALL GETDPRAM(INT2(#A8),ITEMP)
        ITEMP =  (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LAT = DBLE(ITEMP)
        CALL GETDPRAM(INT2(#A7),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LAT = LAT + DBLE(ITEMP)/60.
        CALL GETDPRAM(INT2(#A6),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LAT = LAT + DBLE(ITEMP)/6.0E+03 
        CALL GETDPRAM(INT2(#A5),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LAT = LAT + DBLE(ITEMP)/6.0E+05
C CALCULATE LONGITUDE 
        CALL GETDPRAM(INT2(#AD),ITEMP)
        ITEMP =  (ITEMP .AND. #0F)*100
        LONG = DBLE(ITEMP)
        CALL GETDPRAM(INT2(#AC),ITEMP)
        ITEMP =  (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LONG = LONG + DBLE(ITEMP)
        CALL GETDPRAM(INT2(#AB),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LONG = LONG + DBLE(ITEMP)/60.
        CALL GETDPRAM(INT2(#AA),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LONG = LONG + DBLE(ITEMP)/6.0E+03 
        CALL GETDPRAM(INT2(#A9),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        LONG = LONG + DBLE(ITEMP)/6.0E+05
C ASSIGN DIRECTION POSITIVE EAST AND NORTH
        IF (BTEST(STATUS,7)) LAT=-LAT
        IF (BTEST(STATUS,6)) LONG=-LONG
        IF (.NOT.BTEST(STATUS,4)) IERR = IBSET(IERR,0) !ACQUIRING DATA
C CALCULATE HEADING (HOG) AND SPEED (SOG)
        CALL GETDPRAM(INT2(#B1),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        HOG = REAL(ITEMP)*10.
        CALL GETDPRAM(INT2(#B0),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        HOG = HOG + REAL(ITEMP)/10.
        CALL GETDPRAM(INT2(#AF),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        SOG = REAL(ITEMP)*10.
        CALL GETDPRAM(INT2(#AE),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        SOG = SOG + REAL(ITEMP)/10.
C CALCULATE ALTITUDE IN METERS
        CALL GETDPRAM(INT2(#C3),STATUS)
        ALT = REAL((STATUS .AND. #0F)*10000)
        CALL GETDPRAM(INT2(#C2),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        ALT = ALT + REAL(ITEMP)*100.
        CALL GETDPRAM(INT2(#C1),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        ALT = ALT + REAL(ITEMP)
        CALL GETDPRAM(INT2(#C0),ITEMP)
        ITEMP = (ISHL(ITEMP,-4))*10 + (ITEMP .AND. #0F)
        ALT = ALT + REAL(ITEMP)/100.
        ITEMP = ISHL(STATUS,-4)
        IF (ITEMP .NE. 0) ALT = - ALT
c        print*, 'alt =  ',itemp,alt
C
C MARK AS READ
        CALL SETDPRAM(INT2(#B3),INT2(0))
        CALL SETDPRAM(INT2(#B2),INT2(0))
        RETURN
        END
C********************* GETDPRAM ***************************
C  RETRIEVES A VALUE FROM DUAL PORT RAM
C  IADD = ADDRESS IN DUAL PORT RAM
C  IVAL = VALUE TO SET IN DUAL PORT RAM
C  CALL GETDPRAM (IADD,IVAL) IADD AND IVAL INTERGER*2
C  READS AND RETURNS IN IVAL.
C  RESPONSE READY MASK = #02
C  EXTENDED STATUS PORT ADDRESS= #03
C  DUAL RAM DATA PORT ADDRESS = #02
C  DUAL RAM ADDRESS PORT ADDRESS = #06
C
        SUBROUTINE GETDPRAM (IADD,IVAL)
        INTEGER*2 IADD,IVAL,IRES,I
        INTEGER*2 SGBASE,MSK,STA,DAT,ADR
        PARAMETER (SGBASE=#02A0,MSK=#02,STA=#03,DAT=#02,ADR=#06)
C
        CALL FETCH (SGBASE+DAT,IRES)    !CLEAR RESPONSE FLAG
        CALL OUTPUT(SGBASE+ADR,IADD)    !SET ADDRESS TO WRITE TO
        DOWHILE (IRES .EQ. 0)           !MAKE SURE VALUE IS SET
            CALL FETCH(SGBASE+STA,IRES)
            IRES = IRES .AND. MSK       !RESPONSE READY MASK
        ENDDO
        DO I=1,200                      !DELAY TO ASSURE SPACING
            CALL FETCH(SGBASE+STA,IRES)
        ENDDO
        ival = 0
        CALL FETCH(SGBASE+DAT,IVAL)     !READ AND RETURN NEW VALUE
c        print *, ival
        RETURN
        END
C********************* SETDPRAM ***************************
C  SET VALUES IN DUAL PORT RAM
C  IADD = ADDRESS IN DUAL PORT RAM
C  IVAL = VALUE TO SET IN DUAL PORT RAM
C  CALL SETDPRAM (IADD,IVAL) IADD AND IVAL INTERGER*2
C  READS AND RETURNS SET VALUE IN IVAL. SHOULD EQUAL INPUT
C  RESPONSE READY MASK = #02
C  EXTENDED STATUS PORT ADDRESS= #03
C  DUAL RAM DATA PORT ADDRESS = #02
C  DUAL RAM ADDRESS PORT ADDRESS = #06
C
        SUBROUTINE SETDPRAM (IADD,IVAL)
        INTEGER*2 IADD,IVAL,IRES,I
        INTEGER*2 SGBASE,MSK,STA,DAT,ADR
        PARAMETER (SGBASE=#02A0,MSK=#02,STA=#03,DAT=#02,ADR=#06)
C
        CALL FETCH (SGBASE+DAT,IRES)    !CLEAR RESPONSE FLAG
        CALL OUTPUT(SGBASE+ADR,IADD)    !SET ADDRESS TO WRITE TO
        DOWHILE (IRES .EQ. 0)           !MAKE SURE VALUE IS SET
            CALL FETCH(SGBASE+STA,IRES)
            IRES = IRES .AND. MSK       !RESPONSE READY MASK
        ENDDO
        DO I=1,200                      !DELAY TO ASSURE SPACING
            CALL FETCH(SGBASE+STA,IRES)
        ENDDO
        CALL FETCH(SGBASE+DAT,IRES)     !DISCARD OLD VALUE
        CALL OUTPUT(SGBASE+DAT,IVAL)    !SET NEW VALUE
        DOWHILE (IRES .EQ. 0)           !MAKE SURE VALUE IS SET
            CALL FETCH(SGBASE+STA,IRES)
            IRES = IRES .AND. MSK       !RESPONSE READY MASK
        ENDDO
        DO I=1,200                      !DELAY TO ASSURE SPACING
            CALL FETCH(SGBASE+STA,IRES)
        ENDDO
        ival = 0
        CALL FETCH(SGBASE+DAT,IVAL)     !READ AND RETURN NEW VALUE
c        print *, ival
        END
c ***********************  HZ_200 *************************
        SUBROUTINE HZ_200
        RETURN
        END

