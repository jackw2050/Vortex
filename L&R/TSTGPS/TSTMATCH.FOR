        PROGRAM TSTMATCH 
C PROGRAM USES THE PC104-SG MATCH FUNCTION TO CREATE A MICROSECOND
C DELAY. TESTS A SUBROUTINE TO REPLACE THE PREVIOUS uDELAY.
        IMPLICIT NONE
        INTEGER*1 TB1(0:2),TB2(0:2)       !TIME BYTE
        INTEGER*2 SGBASE,I,IDEL,ITEMP,OLDTIME,IDIFF
        INTEGER*2 MTPTLO,MTPTHI,RSPT,RSMT,STAT,CLRMT,TIMPT
        PARAMETER (SGBASE=#02A0,MTPTHI=#07,MTPTLO=#05,STAT=#01)
        PARAMETER (RSPT=#01,RSMT=#17,CLRMT=#FF,TIMPT=#0F)
10      CONTINUE
        PRINT*, 'INPUT DELAY'
        READ (*,*) IDEL
C READ CURRENT TIME -- UP TO 1000 uSEC 
        DO I=0,2
           CALL FETCH (SGBASE+TIMPT-I,ITEMP)
           TB1(I) = ITEMP
        ENDDO
C
        CALL sgDELAY (IDEL)
C
20      CONTINUE
C READ CURRENT TIME -- UP TO 1000 uSEC 
        DO I=0,2
           CALL FETCH (SGBASE+TIMPT-I,ITEMP)
           TB2(I) = ITEMP
        ENDDO
C PARSE INPUT TO CALCULATE uSEC
        ITEMP = (TB1(2).AND.#0F)*1000         !uSEC
        ITEMP =  ITEMP +(ISHFT(TB1(1),-4))*100 + (TB1(1).AND.#0F)*10
        ITEMP = ITEMP+(ISHFT(TB1(0),-4))
        PRINT *, 'START TIME  ',ITEMP
        OLDTIME = ITEMP
C PARSE INPUT TO CALCULATE uSEC
        ITEMP = (TB2(2).AND.#0F)*1000         !uSEC
        ITEMP =  ITEMP +(ISHFT(TB2(1),-4))*100 + (TB2(1).AND.#0F)*10
        ITEMP = ITEMP+(ISHFT(TB2(0),-4))
        IDIFF = ITEMP-OLDTIME
        IF (IDIFF .LT. 0) IDIFF=IDIFF+10000 !TAKE CARE OF ROLLOVER
        PRINT *, 'END TIME  ',ITEMP
        PRINT *, 'DIFFERENCE ',IDIFF
        PRINT *
        PRINT *, 'DO IT AGAIN? 1 = YES'
        READ  (*,*) ITEMP
        IF (ITEMP .EQ. 1) GOTO 10
        END
c ******************** sgDELAY *************************
C CREATES A SHORT DELAY IN MICROSECONDS.
C LIMITED FROM 15 uSEC TO 9999 uSEC
C ENTERING A NUMBER LESS THAN 15 WILL PRODUCE A 5 uSEC DELAY
C WITH VORTEX BOARD AND IS DEPENDENT OF PROCESSOR SPEED.
        SUBROUTINE sgDELAY (IDEL)
        IMPLICIT NONE
        INTEGER*1 TB(0:2)       !TIME BYTE
        INTEGER*2 SGBASE,I,IDEL,ITEMP,IOUT0,IOUT1,INTBCD
        INTEGER*2 MTPTLO,MTPTHI,RSPT,RSMT,STAT,CLRMT,TIMPT
        PARAMETER (SGBASE=#02A0,MTPTHI=#07,MTPTLO=#05,STAT=#01)
        PARAMETER (RSPT=#01,RSMT=#17,CLRMT=#FF,TIMPT=#0F)
        IF (IDEL .LT. 15) RETURN
C MAKE SURE BOARD IS IDLE
        CALL OUTPUT(SGBASE+MTPTHI,CLRMT)  !NO MATCH POSSIBLE
        CALL OUTPUT(SGBASE+MTPTLO,CLRMT)  !NO MATCH POSSIBLE
        CALL OUTPUT(SGBASE+RSPT,RSMT)     !ZERO MATCH STATUS BIT
C READ CURRENT TIME -- UP TO 1000 uSEC 
        DO I=0,2
           CALL FETCH (SGBASE+TIMPT-I,ITEMP)
           TB(I) = ITEMP
        ENDDO
C PARSE INPUT TO CALCULATE uSEC
        ITEMP = (TB(2).AND.#0F)*1000         !uSEC
        ITEMP =  ITEMP +(ISHFT(TB(1),-4))*100 + (TB(1).AND.#0F)*10
        ITEMP = ITEMP+(ISHFT(TB(0),-4))
C        print*, itemp
C SUBTRACT 15 FOR COMPUTATIONAL OVERHEAD AS OBSERVERED FOR
C VORTEX BOARD. DEPENDS ON PROCESSOR SPEED AND MAY NEED TO
C BE ADJUSTED FOR A DIFFERENT PROCESSOR
        ITEMP = ITEMP + IDEL - 15
        IF (ITEMP .GE. 10000) ITEMP=ITEMP-10000 !TAKE CARE OF ROLLOVER
C        print*, itemp
        IOUT1 = ITEMP/100
        IOUT1 = INTBCD(IOUT1)
        IOUT0 = MOD(ITEMP,100)
C        print*, iout0
        IOUT0 = INTBCD(IOUT0)
C        print *, itemp,iout1,iout0
C LOAD MATCH REGISTERS
        CALL OUTPUT(SGBASE+MTPTHI,IOUT1)
        CALL OUTPUT(SGBASE+MTPTLO,IOUT0)
C WAIT FOR MATCH
C NO TIMEOUT REQUIRED AS THERE WILL BE A MATCH EVERY mSEC.
        ITEMP = 0
        DO WHILE (.NOT.BTEST(ITEMP,3))
          CALL FETCH(SGBASE+STAT,ITEMP)
        ENDDO
C IDLE BOARD
        CALL OUTPUT(SGBASE+MTPTHI,CLRMT)  !NO MATCH POSSIBLE
        CALL OUTPUT(SGBASE+MTPTLO,CLRMT)  !NO MATCH POSSIBLE
        CALL OUTPUT(SGBASE+RSPT,RSMT)     !ZERO MATCH STATUS BIT
        RETURN
        END
C *********************** INTBCD **************************
C CONVERTS A TWO DIGIT INTEGER NUMBER TO BCD
        INTEGER*2 FUNCTION INTBCD (INPUT)
        IMPLICIT NONE
        INTEGER*2 INPUT
        INTEGER*2 HEXVAL,I1,I2
        I2 = INPUT/INT2(10)
        I1 = INPUT - I2*10
        HEXVAL = I2
        HEXVAL = ISHFT(HEXVAL,4)   !SHIFT 4 BITS LEFT
        HEXVAL = HEXVAL + I1
        INTBCD = HEXVAL
        RETURN
        END
c ***********************  HZ_200 *************************
        SUBROUTINE HZ_200
        RETURN
        END

